/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.bdawg.metalbgp

import com.bdawg.metalbgp.fetcher.MetalFetcher
import io.kubernetes.client.openapi.ApiClient
import io.kubernetes.client.util.ClientBuilder
import io.kubernetes.client.util.KubeConfig
import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.default
import kotlinx.cli.multiple
import java.io.FileReader

class App(val args: Array<String>) {

    /**
     * Run the sync job
     *
     * This will:
     * - Get the config from metal / k8s
     * - Turn it in to a unifi based config
     * - Push this to the unifi controller
     * - Initiate a provision for the router
     */
    fun run() {
        val parser = ArgParser("metal-unifi-bgp-sync")
        val localAsns by
        parser
            .option(
                ArgType.String,
                shortName = "a",
                description =
                "MetalASN - MetalBGP ASNs to sync - optional. Otherwise all discovered ASNs will be used",
                fullName = "asn"
            )
            .multiple()
        val dryRun by
        parser
                .option(
                    ArgType.Boolean,
                    shortName = "d",
                    description = "Turn off dry run mode [ default dry run ]"
                )
                .default(true)
        val kubeConfigPath by
        parser
            .option(ArgType.String, shortName = "c", description = "Kube config path")
            .default(System.getenv("HOME") + "/.kube/config")
        parser.parse(args)
        val metalConfig = MetalFetcher().fetch(provideApiClient(kubeConfigPath))

        val unifiJsons = metalConfig.map { UnifiSnippetEmitter(it).emit() }
    }
}

fun provideApiClient(kubeConfigPath: String?): ApiClient {
    return try {
        ClientBuilder.kubeconfig(KubeConfig.loadKubeConfig(kubeConfigPath?.let { FileReader(it) }))
            .build()
    } catch (e: Exception) {
        ClientBuilder.cluster().build()
    }
}

fun main(args: Array<String>) {
    App(args).run()
}
